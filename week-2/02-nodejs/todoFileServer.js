/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos

  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123

  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }

  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");
const fs = require("fs");
const app = express();

app.use(bodyParser.json());

const readfile = (file) => {
	let content = [];
	const fullPath = path.join(__dirname, file);
	fs.readFile(fullPath, "utf8", (err, data) => {
		if (err) {
			throw new Error("Cannot read the file..");
		} else {
			content = JSON.parse(data);
		}
	});
	return content;
};

const writefile = (file, content) => {
	const fullPath = path.join(__dirname, file);
	fs.writeFile(fullPath, content, (err) => {
		if (err) {
			console.log(err);
		} else {
			console.log("Write successfull...");
		}
	});
};

let data = readfile("/todos.json");
console.log(data);
app.get("/todos", (req, res) => {
	let todo = [];
	for (let i = 0; i < data.length; i++) {
		todo.push(data[i].title);
	}
	res.status(200).json(todo);
});

app.get("/todos/:id", (req, res) => {
	const id = parseInt(req.params.id);
	let isId = true;
	let currentTodo = {};
	for (let i = 0; i < data.length; i++) {
		if (data[i].id === id) {
			isId = true;
			currentTodo = data[i];
			break;
		} else {
			isId = false;
		}
	}
	if (isId) {
		res.status(200).json(currentTodo);
	} else {
		res.status(404).json({ message: "id doesn't exists" });
	}
});

app.post("/todos", (req, res) => {
	const ttl = req.body.title;
	const des = req.body.description;
	const complete = req.body.completed;

	data.push({
		id: data.length + 1,
		title: ttl,
		completed: complete,
		description: des,
	});
	writefile("/todos.json", JSON.stringify(data));
	res.status(201).json({ id: data[data.length - 1].id });
});

app.put("/todos/:id", (req, res) => {
	const id = parseInt(req.params.id);
	let updatedTodo = {};
	let isId = true;
	for (let i = 0; i < data.length; i++) {
		if (data[i].id === id) {
			isId = true;
			data[i].title = req.body.title;
			data[i].completed = req.body.completed;
			updatedTodo = data[i];
			break;
		} else {
			isId = false;
		}
	}
	if (isId) {
		writefile("/todos.json", JSON.stringify(data));
		res.status(200).json(updatedTodo);
	} else {
		res.status(404).json({ message: "id doesn't exists" });
	}
});

app.delete("/todos/:id", (req, res) => {
	const id = parseInt(req.params.id);
	let deleted = true;
	for (let i = 0; i < data.length; i++) {
		if (data[i].id === id) {
			data.splice(i, 1);
			deleted = true;
			break;
		} else {
			deleted = false;
		}
	}
	if (deleted) {
		writefile("/todos.json", JSON.stringify(data));
		res.status(200).json({ message: "Todo deleted Successfully!" });
	} else {
		res.status(404).json({ message: "id doesn't exists" });
	}
});

app.listen(3000);

module.exports = app;